<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on jcbwlkr</title>
    <link>http://jacob-walker.com/categories/bash.html</link>
    <description>Recent content in Bash on jcbwlkr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Oct 2016 14:27:34 -0500</lastBuildDate>
    <atom:link href="http://jacob-walker.com/categories/bash.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Taming tmux: Find One Process Among Many Windows</title>
      <link>http://jacob-walker.com/blog/taming-tmux-find-one-process-among-many-windows.html</link>
      <pubDate>Tue, 04 Oct 2016 14:27:34 -0500</pubDate>
      
      <guid>http://jacob-walker.com/blog/taming-tmux-find-one-process-among-many-windows.html</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m a big fan of &lt;a href=&#34;https://tmux.github.io/&#34;&gt;tmux&lt;/a&gt; and I use it daily. Over time I will open more
and more windows and my workspace starts to get a bit cluttered. Occasionally I
will try to open some file in vim that is already open in another window. I
used to dread playing &amp;ldquo;find the right window,&amp;rdquo; especially if I had backgrounded
vim. This happened often enough that I spent the time to make a little tmux
keybinding for finding that window automatically.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Vim users will be used to seeing this screen and may even dread it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;E325: ATTENTION
Found a swap file by the name &amp;quot;~/.vim/swaps/foo.txt.swp&amp;quot;
          owned by: jwalker   dated: Wed Oct  5 18:10:25 2016
         file name: ~jwalker/foo.txt
          modified: no
         user name: jwalker   host name: jacobs-mbp
        process ID: 79121 (still running)
While opening file &amp;quot;foo.txt&amp;quot;
             dated: Wed Oct  5 18:10:25 2016

(1) Another program may be editing the same file.  If this is the case,
    be careful not to end up with two different instances of the same
    file when making changes.  Quit, or continue with caution.
(2) An edit session for this file crashed.
    If this is the case, use &amp;quot;:recover&amp;quot; or &amp;quot;vim -r foo.txt&amp;quot;
    to recover the changes (see &amp;quot;:help recovery&amp;quot;).
    If you did this already, delete the swap file &amp;quot;/Users/jwalker/.vim/swaps/foo.txt.swp&amp;quot;
    to avoid this message.

Swap file &amp;quot;~/.vim/swaps/foo.txt.swp&amp;quot; already exists!
[O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do you see the line that says &lt;code&gt;process ID: 79121&lt;/code&gt;? That gives us the process id
(pid for short) of the vim process that&amp;rsquo;s editing this file. What we&amp;rsquo;ll do is
take that pid and ask tmux to find it for us.&lt;/p&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;

&lt;p&gt;Add this to your &lt;code&gt;~/.tmux.conf&lt;/code&gt; file (and reload the config if necessary)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;bind-key W command-prompt -p &amp;quot;Switch to pane with pid:&amp;quot; &amp;quot;run-shell &#39;pane=\$(ps eww %% | sed \&amp;quot;1d; s/^.*TMUX_PANE=//;s/ .*//\&amp;quot;); [[ -z \$pane ]] &amp;amp;&amp;amp; tmux display-message \&amp;quot;could not find pid\&amp;quot; || tmux switch-client -t \$pane&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that in our config, and knowing the pid we want to find, we hit
&lt;kbd&gt;prefix&lt;/kbd&gt; &lt;kbd&gt;W&lt;/kbd&gt;. Prefix defaults to &lt;kbd&gt;ctrl-b&lt;/kbd&gt; and I
chose capital &lt;kbd&gt;W&lt;/kbd&gt; because I remember this command as &lt;code&gt;Where&lt;/code&gt; and
&lt;kbd&gt;w&lt;/kbd&gt; was already taken. When we do this our tmux will prompt &lt;code&gt;Switch to
pane with pid:&lt;/code&gt; so we&amp;rsquo;ll type in &lt;kbd&gt;79121&lt;/kbd&gt; &lt;kbd&gt;enter&lt;/kbd&gt; and tmux
automatically switches to the right window - even in another session. How cool!
Let&amp;rsquo;s see it in action!&lt;/p&gt;

&lt;div class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;img-responsive img-thumbnail&#34; alt=&#34;finding tmux window containing pid&#34; src=&#34;https://cldup.com/pDEQFB-8Iy.gif&#34; /&gt;
&lt;/div&gt;

&lt;h2 id=&#34;break-it-down-now&#34;&gt;Break it down now&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s unravel this a bit to see the different pieces. It&amp;rsquo;s all on one line and
there is a lot of escaping going on because it&amp;rsquo;s a script within a script
within a string&amp;hellip; but if we split it up it&amp;rsquo;s not hard to follow.&lt;/p&gt;

&lt;p&gt;First, our key binding runs the tmux command &lt;code&gt;command-prompt&lt;/code&gt; with two
arguments: the prompt to display to the user, and the tmux command to run. That
command is &lt;code&gt;run-shell&lt;/code&gt; and the argument we pass to that is the shell script.&lt;/p&gt;

&lt;p&gt;The script first runs &lt;code&gt;ps eww %%&lt;/code&gt;. The &lt;code&gt;%%&lt;/code&gt; gets replaced with whatever you
typed in the command prompt. In our example it becomes &lt;code&gt;ps eww 79121&lt;/code&gt;. &lt;code&gt;ps&lt;/code&gt; is
a tool that inspects the process list for information. The flag &lt;code&gt;e&lt;/code&gt; causes it
to include the environment variables that were present when the process
launched, and the flags &lt;code&gt;ww&lt;/code&gt; improve the formatting a bit (and help for parsing
on ubuntu). The &lt;code&gt;ps&lt;/code&gt; tool accepts different flags and in different styles; this
is the BSD format which works on a Mac and seems to be supported by most Linux
distros as well. Providing the pid as an argument limits the output to just the
process we care about. That command gives output that looks like this
(abbreviated a bit for this post):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;  PID   TT  STAT      TIME COMMAND
79121 s021  S+     0:00.58 vim foo.txt TERM=screen-256color USER=jwalker PAGER=less EDITOR=/usr/local/bin/vim LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 TMUX_PANE=%115 PWD=/Users/jwalker SHELL=/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can see the process in question and we can see its environment variables.
The one we care about is called &lt;code&gt;TMUX_PANE&lt;/code&gt;. Every time you open a new window
or split a window the tmux daemon assigns that pane a unique id and sets it in
this environment variable &lt;code&gt;TMUX_PANE&lt;/code&gt;. That is the secret that will make this
all work but we need to extract it.&lt;/p&gt;

&lt;p&gt;The next step of the script is to pipe the output of &lt;code&gt;ps&lt;/code&gt; to &lt;code&gt;sed&lt;/code&gt; with a
little sed script. This script deletes the header line, deletes everything up
to and including &lt;code&gt;TMUX_PANE=&lt;/code&gt;, then deletes everything after the value. At this
point all we&amp;rsquo;re left with is the value which is &lt;code&gt;%115&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both the &lt;code&gt;ps&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; commands were ran in a subshell &lt;code&gt;$()&lt;/code&gt; and the final
output is assigned to the variable &lt;code&gt;pane&lt;/code&gt;. Next, we do an evaluation to see if
&lt;code&gt;pane&lt;/code&gt; is empty (perhaps we mistyped the pid). We use &lt;code&gt;[[ -z $pane ]]&lt;/code&gt; which
will succeed if it is empty. In that case we run &lt;code&gt;tmux display-message &amp;quot;could
not find pid&amp;quot;&lt;/code&gt; and we&amp;rsquo;re done.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;pane&lt;/code&gt; was not empty we run &lt;code&gt;tmux switch-client -t $pane&lt;/code&gt;. That command
instructs the client to switch to the pane with id &lt;code&gt;%115&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;in-conclusion&#34;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;I hope this little script makes your tmux experience a little better. I don&amp;rsquo;t
use it every day myself but when it comes up I am glad to have it. I would also
like to point out that although I used a vim process in my example there&amp;rsquo;s
nothing really vim specific about this tip. You could use this command to
switch to the pane running any process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ardan Labs</title>
      <link>http://jacob-walker.com/portfolio/ardan-labs.html</link>
      <pubDate>Mon, 19 Sep 2016 22:26:33 -0500</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/ardan-labs.html</guid>
      <description>&lt;p&gt;My full time engagement is with the very talented team at &lt;a href=&#34;https://www.ardanlabs.com/&#34;&gt;Ardan Labs&lt;/a&gt;.
We specialize in the Go programming language and offer training and consulting
services.&lt;/p&gt;

&lt;p&gt;With Ardan I have worked with clients ranging from small start ups to Fortune
100 companies. Projects I have worked on have involved stock market evaluation,
monitoring and alerting configuration, and integration with various third party
services and APIs.&lt;/p&gt;

&lt;p&gt;We are available to offer training, consulting, or to help you with your project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Dotfiles</title>
      <link>http://jacob-walker.com/portfolio/dotfiles.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/dotfiles.html</guid>
      <description>&lt;p&gt;It seems like every *nix developer hosts at least their bashrc file on GitHub
and I am no exception. My repo uses the Ruby gem &lt;a href=&#34;https://github.com/technicalpickles/homesick&#34;&gt;homesick&lt;/a&gt; to easily
keep my config files in sync.&lt;/p&gt;

&lt;p&gt;To further ease the process I can install or update my config by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;( curl -L http://bit.ly/jacobwalker )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The installation script is Linux specific and hasn&amp;rsquo;t been updated in a
while.&lt;/p&gt;

&lt;p&gt;Key features of my dotfiles include my vim, zsh, and tmux configs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/mydotfiles&#34;&gt;My Dotfiles on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TimeIPS</title>
      <link>http://jacob-walker.com/portfolio/timeips.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/timeips.html</guid>
      <description>&lt;p&gt;From October 2010 to February 2015 the majority of my development focus was
with my employer TimeIPS. We made a time and attendance system which is used by
thousands of companies around the world.&lt;/p&gt;

&lt;p&gt;TimeIPS is used to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Track employee hours worked from a variety of hardware and software interfaces&lt;/li&gt;
&lt;li&gt;Record benefit usages and accruals&lt;/li&gt;
&lt;li&gt;Monitor employee adherence to schedules&lt;/li&gt;
&lt;li&gt;Ensure employee coverage for particular tasks or locations&lt;/li&gt;
&lt;li&gt;Calculate FLSA overtime&lt;/li&gt;
&lt;li&gt;Record piecework pay such as tips and bonuses&lt;/li&gt;
&lt;li&gt;Serve company documents to employees and managers&lt;/li&gt;
&lt;li&gt;Calculate automatic holiday rules&lt;/li&gt;
&lt;li&gt;And many other things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At TimeIPS I lead a team of 4 in the development of our products. Some of my
major accomplishments in this role include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introducing Test Driven Development with &lt;a href=&#34;https://phpunit.de/&#34;&gt;PHPUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementing Continuous Integration with &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins-CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Starting code reviews via &lt;a href=&#34;http://phabricator.org/&#34;&gt;Phabricator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Leading the development of a REST API&lt;/li&gt;
&lt;li&gt;Working to update legacy code to use the &lt;a href=&#34;http://www.doctrine-project.org/&#34;&gt;Doctrine 2&lt;/a&gt; ORM&lt;/li&gt;
&lt;li&gt;Implementing a Zero Defect policy&lt;/li&gt;
&lt;li&gt;Developing a system for managing our farm of QEMU virtual machines&lt;/li&gt;
&lt;li&gt;Revamped our build process making heavy use of &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;,
&lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;, and &lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Wrecking Ball Media</title>
      <link>http://jacob-walker.com/portfolio/wrecking-ball-media.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/wrecking-ball-media.html</guid>
      <description>&lt;p&gt;From February 2015 to February 2016 I was a contracting engineer at &lt;a href=&#34;http://wreckingballmedia.com/&#34;&gt;Wrecking
Ball Media Group&lt;/a&gt;. As a part of this team I worked on a web based
community platform for &lt;a href=&#34;http://www.adobe.com/&#34;&gt;Adobe&lt;/a&gt;. The project utilized several different
APIs from Adobe and other vendors to create a white labeled site for connecting
and empowering creative youth.&lt;/p&gt;

&lt;p&gt;For this project I primarily worked in Go. I developed the server application
composing middleware, Go templating, a REST API, request contexts, a service
layer, logger, internationalization, and both unit and integration tests.&lt;/p&gt;

&lt;p&gt;Additionally I constructed the team&amp;rsquo;s Continuous Integration and Continuous
Deployment pipelines using Ansible, Docker, Jenkins, Hipchat, and AWS.&lt;/p&gt;

&lt;p&gt;Multiple deployments of the platform were completed during my time including
the &lt;a href=&#34;https://withmalala.org/&#34;&gt;#WithMalala&lt;/a&gt; project and the &lt;a href=&#34;https://sundanceignitewhatsnext.org&#34;&gt;2015 Sundance Ignite
Challenge&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>