{"result": {"body": "<p>Looking through the <a href=\"https://github.com/PHPOffice/PHPExcel\">PHPExcel</a> library\nrecently I saw how Mark Baker overrides the magic <code>__clone</code> method with\ncomments about ensuring that cloning will perform a deep copy instead of a\nshallow one. This is a topic with which I had not had much experience so I did\nsome research and experimenting to learn what happens when you use <code>clone</code> and\nthe difference between a shallow copy and a deep copy.</p>\n<p>First I examined how you might copy variables in general. Let's start with the\nbasics.</p>\n<pre><code class=\"php\">// Example 1\n$foo = 1;\n$bar = $foo; // Copy by value\n++$bar;\nprint $bar; // Outputs 2\nprint $foo; // Outputs 1\n</code></pre>\n\n<p><code>$bar</code> is a copy of <code>$foo</code>. Incrementing <code>$bar</code> has no effect on <code>$foo</code>. If we\nwanted different behavior we would need to copy by reference with the use of an\nampersand.</p>\n<pre><code class=\"php\">// Example 2\n$foo = 1;\n$bar =&amp; $foo; // Copy by reference\n++$bar;\nprint $bar; // Outputs 2\nprint $foo; // Outputs 2\n</code></pre>\n\n<p>Now when we increment <code>$bar</code> we are also incrementing <code>$foo</code>. Well, not really.\n<code>$foo</code>, the variable, is a handle or reference to where the data is stored in\nmemory. In the first example we copy by value which (more or less) makes a new\nentry in memory and <code>$bar</code> is a handle to that new location. In the second\nexample <code>$bar</code> simply copies the handle. There is only one entry in memory and\nboth <code>$foo</code> and <code>$bar</code> point to the same location. What we are actually doing\nwhen we increment <code>$bar</code> is incrementing the data referenced by <code>$bar</code>. <code>$foo</code>\nreferences the same data.</p>\n<p>Next I looked at how to copy objects. I started with this simple class Project.</p>\n<pre><code class=\"php\">&lt;?php\n\nclass Project {\n    protected $description;\n\n    public function setDescription($description) {\n        $this-&gt;description = $description;\n\n        return $this;\n    }\n\n    public function getDescription() {\n        return $this-&gt;description;\n    }\n}\n</code></pre>\n\n<p>I repeated the same copy assignment from Example 1.</p>\n<pre><code class=\"php\">$project_one = new Project();\n$project_one-&gt;setDescription(&quot;This is my first test project&quot;);\n$project_two = $project_one; // Copying by value?\n</code></pre>\n\n<p>In the previous examples we would have two completely distinct variables that\nreference two different addresses in memory. So to see if this holds true we\ncan make a change in <code>$project_two</code> and see the impact.</p>\n<pre><code class=\"php\">$project_two-&gt;setDescription(&quot;A new description for my copied project&quot;);\nprint $project_one-&gt;getDescription();\n</code></pre>\n\n<p>Based on Example 1 we might expect that this would print the original\ndescription we set in <code>$project_one</code>. In fact, it will actually print the new\ndescription. It appears that the objects are copied by reference. One of the\nthings you will often hear is that in PHP 5 objects are copied by reference by\ndefault. Some research shows that isn't quite true either. Consider this\nexplanation from\n<a href=\"http://php.net/manual/en/language.oop5.references.php\">PHP.net</a></p>\n<blockquote>\n<p>A PHP reference is an alias, which allows two different variables to write to\nthe same value. As of PHP 5, an object variable doesn't contain the object\nitself as value anymore. It only contains an object identifier which allows\nobject accessors to find the actual object. When an object is sent by\nargument, returned or assigned to another variable, the different variables\nare not aliases: they hold a copy of the identifier, which points to the same\nobject.</p>\n</blockquote>\n<p>This means copying an object by value will copy the identifier... by value.\nThis behaves very similarly to copying by reference because the copied\nidentifier points to the same object but is not exactly the same. For a more\ndetailed explanation of the difference you can visit the source link.</p>\n<p>So what if you don't want this behavior? Here enters the <code>clone</code> keyword.</p>\n<pre><code class=\"php\">$project_one = new Project();\n$project_one-&gt;setDescription(&quot;This is my first test project&quot;);\n$project_two = clone $project_one; // Cloning to get a new object\n</code></pre>\n\n<p>Now $project_two is a clone of <code>$project_one</code> and is its own honest object.\nWhen we repeat the test with the descriptions we will see that monkeying around\nwith <code>$project_two</code>'s description has no effect on <code>$project_one</code>.</p>\n<p>What happens if the property of a Project is another object? To test this I\ncreated a new class Person and modified Project to hold a Person</p>\n<pre><code class=\"php\">&lt;?php\n\nclass Person {\n    protected $name;\n\n    public function setName($name) {\n        $this-&gt;name = $name;\n\n        return $this;\n    }\n\n    public function getName() {\n        return $this-&gt;name;\n    }\n}\n</code></pre>\n\n<pre><code class=\"php\">&lt;?php\n\nclass Project {\n    protected $leadDeveloper;\n\n    public function setLeadDeveloper(Person $developer) {\n        $this-&gt;leadDeveloper = $developer;\n\n        return $this;\n    }\n\n    public function getLeadDeveloper() {\n        return $this-&gt;leadDeveloper;\n    }\n}\n</code></pre>\n\n<p>I then made a Project and set its Lead Developer.</p>\n<pre><code class=\"php\">$jacob = new Person();\n$jacob-&gt;setName(&quot;Jacob&quot;);\n\n$project_one = new Project();\n$project_one-&gt;setLeadDeveloper($jacob);\n$project_two = clone $project_one;\n\n$matthew = new Person();\n$matthew-&gt;setName(&quot;Matthew&quot;);\n$project_two-&gt;setLeadDeveloper($matthew);\n\nprint $project_one-&gt;getLeadDeveloper()-&gt;getName(); // Outputs &quot;Jacob&quot;\n</code></pre>\n\n<p>As <code>$project_two</code> is a clone, setting a new value for\n<code>$project_two-&gt;leadDeveloper</code> did not change <code>$project_one</code>. Great, right?\nLet's look at this from a different angle.</p>\n<pre><code class=\"php\">$jacob = new Person();\n$jacob-&gt;setName(&quot;Jacob&quot;);\n\n$project_one = new Project();\n$project_one-&gt;setLeadDeveloper($jacob);\n$project_two = clone $project_one;\n\n$project_two-&gt;getLeadDeveloper()-&gt;setName(&quot;Matthew&quot;);\n\nprint $project_one-&gt;getLeadDeveloper()-&gt;getName(); // Outputs &quot;Matthew&quot;\n</code></pre>\n\n<p>The plot thickens. Here we can see that <code>$project_one-&gt;leadDeveloper</code> and\n<code>$project_two-&gt;leadDeveloper</code> both point to the same object. $project_one\nand $project_two are both unique objects but they do not have unique values for\nproperties that are references or object identifiers. This is what is meant by\na shallow copy. If we wanted the two projects to be completely separate we\nwould need to change the default behavior of clone to perform a deep copy\ninstead of a shallow copy. To do this I define the magic <code>__clone</code> method.</p>\n<pre><code class=\"php\">class Project {\n    // Snip properties, getters, and setters\n\n    public function __clone() {\n        $this-&gt;leadDeveloper = clone $this-&gt;leadDeveloper;\n    }\n}\n</code></pre>\n\n<p>After PHP clones an object it will attempt to call the <code>__clone</code> method on\n<strong>the new cloned object</strong>. Now when we perform the previous test we can see\nthat <code>$project_one-&gt;leadDeveloper</code> and <code>$project_two-&gt;leadDeveloper</code>\npoint to two completely different objects. This is a deep copy.</p>\n<p>Note that a common technique for ensuring a deep copy is to serialize then\nimmediately unserialize each of a class's object properties. Take for example\nthis code from PHPExcel</p>\n<pre><code class=\"php\">public function __clone() {\n    foreach($this as $key =&gt; $val) {\n        if (is_object($val) || (is_array($val))) {\n            $this-&gt;{$key} = unserialize(serialize($val));\n        }\n    }\n}\n</code></pre>\n\n<p>This method forces PHP to split apart any object properties from their\nreferences and return new instances.</p>\n<p>Additional information and examples about cloning can be found on\n<a href=\"http://php.net/manual/en/language.oop5.cloning.php\">php.net</a></p>", "title": "PHP Clone and Shallow vs Deep Copying", "tags": ["php", "oop"], "summary": "I explore the differences in shallow vs deep copies when cloning an object in PHP.", "date": "2013-01-06", "_id": "php-clone-and-shallow-vs-deep-copying"}}