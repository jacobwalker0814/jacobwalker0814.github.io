<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jcbwlkr</title>
    <link>http://jacob-walker.com/</link>
    <description>Recent content on jcbwlkr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Oct 2016 14:27:34 -0500</lastBuildDate>
    <atom:link href="http://jacob-walker.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Taming tmux: Find One Process Among Many Windows</title>
      <link>http://jacob-walker.com/blog/taming-tmux-find-one-process-among-many-windows.html</link>
      <pubDate>Tue, 04 Oct 2016 14:27:34 -0500</pubDate>
      
      <guid>http://jacob-walker.com/blog/taming-tmux-find-one-process-among-many-windows.html</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m a big fan of &lt;a href=&#34;https://tmux.github.io/&#34;&gt;tmux&lt;/a&gt; and I use it daily. Over time I will open more
and more windows and my workspace starts to get a bit cluttered. Occasionally I
will try to open some file in vim that is already open in another window. I
used to dread playing &amp;ldquo;find the right window&amp;rdquo; especially if I had backgrounded
vim in some window. This happened often enough that I spent the time to come up
with a little tmux keybinding to find that window automatically.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Vim users will be used to seeing this screen and may even dread it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;E325: ATTENTION
Found a swap file by the name &amp;quot;~/.vim/swaps/foo.txt.swp&amp;quot;
          owned by: jwalker   dated: Wed Oct  5 18:10:25 2016
         file name: ~jwalker/foo.txt
          modified: no
         user name: jwalker   host name: jacobs-mbp
        process ID: 79121 (still running)
While opening file &amp;quot;foo.txt&amp;quot;
             dated: Wed Oct  5 18:10:25 2016

(1) Another program may be editing the same file.  If this is the case,
    be careful not to end up with two different instances of the same
    file when making changes.  Quit, or continue with caution.
(2) An edit session for this file crashed.
    If this is the case, use &amp;quot;:recover&amp;quot; or &amp;quot;vim -r foo.txt&amp;quot;
    to recover the changes (see &amp;quot;:help recovery&amp;quot;).
    If you did this already, delete the swap file &amp;quot;/Users/jwalker/.vim/swaps/foo.txt.swp&amp;quot;
    to avoid this message.

Swap file &amp;quot;~/.vim/swaps/foo.txt.swp&amp;quot; already exists!
[O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do you see the line that says &lt;code&gt;process ID: 79121&lt;/code&gt;? That gives us the process id
(pid for short) of the &lt;code&gt;vim&lt;/code&gt; process that&amp;rsquo;s editing this file. What we&amp;rsquo;ll do
is take that pid and ask tmux to find it for us.&lt;/p&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;

&lt;p&gt;Add this to your &lt;code&gt;~/.tmux.conf&lt;/code&gt; file (and reload the config if necessary)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;bind-key W command-prompt -p &amp;quot;Switch to pane with pid:&amp;quot; &amp;quot;run-shell &#39;pane=\$(ps eww %% | sed \&amp;quot;1d; s/^.*TMUX_PANE=//;s/ .*//\&amp;quot;); [[ -z \$pane ]] &amp;amp;&amp;amp; tmux display-message \&amp;quot;could not find pid\&amp;quot; || tmux switch-client -t \$pane&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that in our config and knowing the pid we want to find we hit
&lt;kbd&gt;prefix&lt;/kbd&gt; &lt;kbd&gt;W&lt;/kbd&gt;. Prefix defaults to &lt;kbd&gt;ctrl-b&lt;/kbd&gt; and I
chose capital &lt;kbd&gt;W&lt;/kbd&gt; because I remember this command as &lt;code&gt;Where&lt;/code&gt; and
&lt;kbd&gt;w&lt;/kbd&gt; was already taken. When we do this our tmux will prompt &lt;code&gt;Switch to
pane with pid:&lt;/code&gt; so we&amp;rsquo;ll type in &lt;kbd&gt;79121&lt;/kbd&gt; &lt;kbd&gt;enter&lt;/kbd&gt; and tmux
automatically switches to the right window even in another session. How cool!
Let&amp;rsquo;s see it in action!&lt;/p&gt;

&lt;div class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;img-responsive img-thumbnail&#34; alt=&#34;finding tmux window containing pid&#34; src=&#34;https://cldup.com/pDEQFB-8Iy.gif&#34; /&gt;
&lt;/div&gt;

&lt;h2 id=&#34;break-it-down-now&#34;&gt;Break it down now&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s unravel this a bit to see the different pieces. It&amp;rsquo;s all one on line and
there is a lot of escaping going on because it&amp;rsquo;s a script within a script
within a string&amp;hellip; but if we split it up it&amp;rsquo;s not hard to follow.&lt;/p&gt;

&lt;p&gt;First our key binding runs the tmux command &lt;code&gt;command-prompt&lt;/code&gt; with two
arguments: the prompt to display to the user and the tmux command to run. That
command is &lt;code&gt;run-shell&lt;/code&gt; and the argument we pass to that is the shell script.&lt;/p&gt;

&lt;p&gt;The script first runs &lt;code&gt;ps eww %%&lt;/code&gt;. The &lt;code&gt;%%&lt;/code&gt; gets replaced with whatever you
typed in the command prompt so in our example it becomes &lt;code&gt;ps eww 79121&lt;/code&gt;. Now
&lt;code&gt;ps&lt;/code&gt; is a tool that inspects the process list for information. The flag &lt;code&gt;e&lt;/code&gt;
causes it to include the environment variables that were present when the
process launched and the flags &lt;code&gt;ww&lt;/code&gt; improve the formatting a bit (and help for
parsing on ubuntu). The &lt;code&gt;ps&lt;/code&gt; tool accepts different flags and in different
styles; this is the BSD format which works on a Mac and seems to be supported
by most Linux distros as well. Providing the pid as an argument limits the
output to just the process we care about. That command gives output that looks
like this (abbreviated a bit for this post)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;  PID   TT  STAT      TIME COMMAND
79121 s021  S+     0:00.58 vim foo.txt TERM=screen-256color USER=jwalker PAGER=less EDITOR=/usr/local/bin/vim LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 TMUX_PANE=%115 PWD=/Users/jwalker SHELL=/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can see the process in question and we can see its environment variables.
The one we care about is called &lt;code&gt;TMUX_PANE&lt;/code&gt;. Every time you open a new window
or split a window the tmux daemon assigns that pane a unique id and sets it in
this environment variable &lt;code&gt;TMUX_PANE&lt;/code&gt;. That is the secret that is going to make
this all work but we need to extract it.&lt;/p&gt;

&lt;p&gt;The next step of the script is to pipe the output of &lt;code&gt;ps&lt;/code&gt; to &lt;code&gt;sed&lt;/code&gt; with a
little sed script that first deletes the header line and then deletes
everything up to and including &lt;code&gt;TMUX_PANE=&lt;/code&gt; and then deletes everything after
the value. At this point all we&amp;rsquo;re left with is the value we want which is
&lt;code&gt;%115&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both the &lt;code&gt;ps&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; commands were ran in a subshell &lt;code&gt;$()&lt;/code&gt; and the final
output is assigned to the variable &lt;code&gt;pane&lt;/code&gt;. Next we do an evaluation to see if
&lt;code&gt;pane&lt;/code&gt; is empty (perhaps we mistyped the pid). We use &lt;code&gt;[[ -z $pane ]]&lt;/code&gt; which
will succeed if it is empty. In that case we run &lt;code&gt;tmux display-message &amp;quot;could
not find pid&amp;quot;&lt;/code&gt; and we&amp;rsquo;re done.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;pane&lt;/code&gt; was not empty we run &lt;code&gt;tmux switch-client -t $pane&lt;/code&gt;. That command
instructs the client to switch to the pane with id &lt;code&gt;%115&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;in-conclusion&#34;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;I hope this little script makes your tmux experience a little better. I don&amp;rsquo;t
use it every day myself but when it comes up I am glad to have it. I would also
like to point out that although I used a vim process in my example there&amp;rsquo;s
nothing really vim specific about this tip. You could use this command to
switch to the pane running any process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Note on Recovering from InnoDB Corruption</title>
      <link>http://jacob-walker.com/blog/a-note-on-recovering-from-innodb-corruption.html</link>
      <pubDate>Thu, 27 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/blog/a-note-on-recovering-from-innodb-corruption.html</guid>
      <description>&lt;p&gt;InnoDB is a great storage engine for MySQL offering, among other things,
transaction support. One of its drawbacks is the difficulty that you can face
when corruption inevitably hits.&lt;/p&gt;

&lt;p&gt;At work we have dealt with corrupt InnoDB tables often enough to make the
procedure fairly routine. Last week I was faced with a situation that had me
pulling my hair out; in fact we almost threw in the towel.&lt;/p&gt;

&lt;p&gt;In this particular instance I was connecting to the database with the standard
command line client &lt;code&gt;mysql&lt;/code&gt;. Every time I ran any query (against the corrupt
table or not) I was slapped in the face with the annoying &amp;ldquo;MySQL Server Has
Gone Away&amp;rdquo; message. Even queries like &lt;code&gt;SHOW PROCESSLIST;&lt;/code&gt; would trigger the
problem.&lt;/p&gt;

&lt;p&gt;Right before we gave up I had an idea. When you start the client it gives you
the following message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this means is that the client looks up meta information about the tables
and columns in your selected database so that when you hit &lt;kbd&gt;TAB&lt;/kbd&gt; it
will auto fill the table names like you would get on the command line. The list
of tables and columns is rebuilt any time you change databases or issue the
&lt;code&gt;REHASH;&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;On a hunch I tried starting the client with the &lt;code&gt;-A&lt;/code&gt; flag to prevent this table
scanning. I don&amp;rsquo;t know the technical reason within MySQL&amp;rsquo;s binaries but with
this option enabled my problem went away. I can only assume that when the
client scans the tables (including the corrupt table) something goes horribly
wrong.&lt;/p&gt;

&lt;p&gt;So just file that away in your DBA utility belt :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Clone and Shallow vs Deep Copying</title>
      <link>http://jacob-walker.com/blog/php-clone-and-shallow-vs-deep-copying.html</link>
      <pubDate>Sun, 06 Jan 2013 00:00:00 -0600</pubDate>
      
      <guid>http://jacob-walker.com/blog/php-clone-and-shallow-vs-deep-copying.html</guid>
      <description>&lt;p&gt;Looking through the &lt;a href=&#34;https://github.com/PHPOffice/PHPExcel&#34;&gt;PHPExcel&lt;/a&gt; library
recently I saw how Mark Baker overrides the magic &lt;code&gt;__clone&lt;/code&gt; method with
comments about ensuring that cloning will perform a deep copy instead of a
shallow one. This is a topic with which I had not had much experience so I did
some research and experimenting to learn what happens when you use &lt;code&gt;clone&lt;/code&gt; and
the difference between a shallow copy and a deep copy.&lt;/p&gt;

&lt;p&gt;First I examined how you might copy variables in general. Let&amp;rsquo;s start with the
basics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Example 1
$foo = 1;
$bar = $foo; // Copy by value
++$bar;
print $bar; // Outputs 2
print $foo; // Outputs 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$bar&lt;/code&gt; is a copy of &lt;code&gt;$foo&lt;/code&gt;. Incrementing &lt;code&gt;$bar&lt;/code&gt; has no effect on &lt;code&gt;$foo&lt;/code&gt;. If we
wanted different behavior we would need to copy by reference with the use of an
ampersand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Example 2
$foo = 1;
$bar =&amp;amp; $foo; // Copy by reference
++$bar;
print $bar; // Outputs 2
print $foo; // Outputs 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we increment &lt;code&gt;$bar&lt;/code&gt; we are also incrementing &lt;code&gt;$foo&lt;/code&gt;. Well, not really.
&lt;code&gt;$foo&lt;/code&gt;, the variable, is a handle or reference to where the data is stored in
memory. In the first example we copy by value which (more or less) makes a new
entry in memory and &lt;code&gt;$bar&lt;/code&gt; is a handle to that new location. In the second
example &lt;code&gt;$bar&lt;/code&gt; simply copies the handle. There is only one entry in memory and
both &lt;code&gt;$foo&lt;/code&gt; and &lt;code&gt;$bar&lt;/code&gt; point to the same location. What we are actually doing
when we increment &lt;code&gt;$bar&lt;/code&gt; is incrementing the data referenced by &lt;code&gt;$bar&lt;/code&gt;. &lt;code&gt;$foo&lt;/code&gt;
references the same data.&lt;/p&gt;

&lt;p&gt;Next I looked at how to copy objects. I started with this simple class Project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Project {
    protected $description;

    public function setDescription($description) {
        $this-&amp;gt;description = $description;

        return $this;
    }

    public function getDescription() {
        return $this-&amp;gt;description;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I repeated the same copy assignment from Example 1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$project_one = new Project();
$project_one-&amp;gt;setDescription(&amp;quot;This is my first test project&amp;quot;);
$project_two = $project_one; // Copying by value?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the previous examples we would have two completely distinct variables that
reference two different addresses in memory. So to see if this holds true we
can make a change in &lt;code&gt;$project_two&lt;/code&gt; and see the impact.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$project_two-&amp;gt;setDescription(&amp;quot;A new description for my copied project&amp;quot;);
print $project_one-&amp;gt;getDescription();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on Example 1 we might expect that this would print the original
description we set in &lt;code&gt;$project_one&lt;/code&gt;. In fact, it will actually print the new
description. It appears that the objects are copied by reference. One of the
things you will often hear is that in PHP 5 objects are copied by reference by
default. Some research shows that isn&amp;rsquo;t quite true either. Consider this
explanation from
&lt;a href=&#34;http://php.net/manual/en/language.oop5.references.php&#34;&gt;PHP.net&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A PHP reference is an alias, which allows two different variables to write to
the same value. As of PHP 5, an object variable doesn&amp;rsquo;t contain the object
itself as value anymore. It only contains an object identifier which allows
object accessors to find the actual object. When an object is sent by
argument, returned or assigned to another variable, the different variables
are not aliases: they hold a copy of the identifier, which points to the same
object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means copying an object by value will copy the identifier&amp;hellip; by value.
This behaves very similarly to copying by reference because the copied
identifier points to the same object but is not exactly the same. For a more
detailed explanation of the difference you can visit the source link.&lt;/p&gt;

&lt;p&gt;So what if you don&amp;rsquo;t want this behavior? Here enters the &lt;code&gt;clone&lt;/code&gt; keyword.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$project_one = new Project();
$project_one-&amp;gt;setDescription(&amp;quot;This is my first test project&amp;quot;);
$project_two = clone $project_one; // Cloning to get a new object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now $project_two is a clone of &lt;code&gt;$project_one&lt;/code&gt; and is its own honest object.
When we repeat the test with the descriptions we will see that monkeying around
with &lt;code&gt;$project_two&lt;/code&gt;&amp;rsquo;s description has no effect on &lt;code&gt;$project_one&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happens if the property of a Project is another object? To test this I
created a new class Person and modified Project to hold a Person&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Person {
    protected $name;

    public function setName($name) {
        $this-&amp;gt;name = $name;

        return $this;
    }

    public function getName() {
        return $this-&amp;gt;name;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Project {
    protected $leadDeveloper;

    public function setLeadDeveloper(Person $developer) {
        $this-&amp;gt;leadDeveloper = $developer;

        return $this;
    }

    public function getLeadDeveloper() {
        return $this-&amp;gt;leadDeveloper;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then made a Project and set its Lead Developer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jacob = new Person();
$jacob-&amp;gt;setName(&amp;quot;Jacob&amp;quot;);

$project_one = new Project();
$project_one-&amp;gt;setLeadDeveloper($jacob);
$project_two = clone $project_one;

$matthew = new Person();
$matthew-&amp;gt;setName(&amp;quot;Matthew&amp;quot;);
$project_two-&amp;gt;setLeadDeveloper($matthew);

print $project_one-&amp;gt;getLeadDeveloper()-&amp;gt;getName(); // Outputs &amp;quot;Jacob&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;code&gt;$project_two&lt;/code&gt; is a clone, setting a new value for
&lt;code&gt;$project_two-&amp;gt;leadDeveloper&lt;/code&gt; did not change &lt;code&gt;$project_one&lt;/code&gt;. Great, right?
Let&amp;rsquo;s look at this from a different angle.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jacob = new Person();
$jacob-&amp;gt;setName(&amp;quot;Jacob&amp;quot;);

$project_one = new Project();
$project_one-&amp;gt;setLeadDeveloper($jacob);
$project_two = clone $project_one;

$project_two-&amp;gt;getLeadDeveloper()-&amp;gt;setName(&amp;quot;Matthew&amp;quot;);

print $project_one-&amp;gt;getLeadDeveloper()-&amp;gt;getName(); // Outputs &amp;quot;Matthew&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plot thickens. Here we can see that &lt;code&gt;$project_one-&amp;gt;leadDeveloper&lt;/code&gt; and
&lt;code&gt;$project_two-&amp;gt;leadDeveloper&lt;/code&gt; both point to the same object. $project_one
and $project_two are both unique objects but they do not have unique values for
properties that are references or object identifiers. This is what is meant by
a shallow copy. If we wanted the two projects to be completely separate we
would need to change the default behavior of clone to perform a deep copy
instead of a shallow copy. To do this I define the magic &lt;code&gt;__clone&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Project {
    // Snip properties, getters, and setters

    public function __clone() {
        $this-&amp;gt;leadDeveloper = clone $this-&amp;gt;leadDeveloper;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After PHP clones an object it will attempt to call the &lt;code&gt;__clone&lt;/code&gt; method on
&lt;strong&gt;the new cloned object&lt;/strong&gt;. Now when we perform the previous test we can see
that &lt;code&gt;$project_one-&amp;gt;leadDeveloper&lt;/code&gt; and &lt;code&gt;$project_two-&amp;gt;leadDeveloper&lt;/code&gt;
point to two completely different objects. This is a deep copy.&lt;/p&gt;

&lt;p&gt;Note that a common technique for ensuring a deep copy is to serialize then
immediately unserialize each of a class&amp;rsquo;s object properties. Take for example
this code from PHPExcel&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function __clone() {
    foreach($this as $key =&amp;gt; $val) {
        if (is_object($val) || (is_array($val))) {
            $this-&amp;gt;{$key} = unserialize(serialize($val));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method forces PHP to split apart any object properties from their
references and return new instances.&lt;/p&gt;

&lt;p&gt;Additional information and examples about cloning can be found on
&lt;a href=&#34;http://php.net/manual/en/language.oop5.cloning.php&#34;&gt;php.net&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>devICT</title>
      <link>http://jacob-walker.com/portfolio/devict.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/devict.html</guid>
      <description>&lt;p&gt;devICT is the largest software development community in Wichita boasting over
500 registered members. Since joining in 2012 I have taken on the
responsibility of being the director. The group covers all aspects of software
development. Our mission is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To educate, empower, and connect software developers in the Wichita area.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I first joined the group in December of 2012 and took an active role from the
beginning. I help to organize and promote events, welcome new members, mediate
conflicts, and give presentations. In July of 2016 the group&amp;rsquo;s founder &lt;a href=&#34;http://sethetter.com/&#34;&gt;Seth
Etter&lt;/a&gt; switched his focus to running the civic tech group &lt;a href=&#34;https://openwichita.com/&#34;&gt;Open
Wichita&lt;/a&gt;. I agreed to carry the torch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devict.org&#34;&gt;devICT Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://meetup.com/devict&#34;&gt;Meetup Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/devict/&#34;&gt;GitHub Organization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ardan Labs</title>
      <link>http://jacob-walker.com/portfolio/ardan-labs.html</link>
      <pubDate>Mon, 19 Sep 2016 22:26:33 -0500</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/ardan-labs.html</guid>
      <description>&lt;p&gt;My full time engagement is with the very talented team at &lt;a href=&#34;https://www.ardanlabs.com/&#34;&gt;Ardan Labs&lt;/a&gt;.
We specialize in the Go programming language and offer training and consulting
services.&lt;/p&gt;

&lt;p&gt;With Ardan I have worked with clients ranging from small start ups to Fortune
100 companies. Projects I have worked on have involved stock market evaluation,
monitoring and alerting configuration, and integration with various third party
services and APIs.&lt;/p&gt;

&lt;p&gt;We are available to offer training, consulting, or to help you with your project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrecking Ball Media</title>
      <link>http://jacob-walker.com/portfolio/wrecking-ball-media.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/wrecking-ball-media.html</guid>
      <description>&lt;p&gt;From February 2015 to February 2016 I was a contracting engineer at &lt;a href=&#34;http://wreckingballmedia.com/&#34;&gt;Wrecking
Ball Media Group&lt;/a&gt;. As a part of this team I worked on a web based
community platform for &lt;a href=&#34;http://www.adobe.com/&#34;&gt;Adobe&lt;/a&gt;. The project utilized several different
APIs from Adobe and other vendors to create a white labeled site for connecting
and empowering creative youth.&lt;/p&gt;

&lt;p&gt;For this project I primarily worked in Go. I developed the server application
composing middleware, Go templating, a REST API, request contexts, a service
layer, logger, internationalization, and both unit and integration tests.&lt;/p&gt;

&lt;p&gt;Additionally I constructed the team&amp;rsquo;s Continuous Integration and Continuous
Deployment pipelines using Ansible, Docker, Jenkins, Hipchat, and AWS.&lt;/p&gt;

&lt;p&gt;Multiple deployments of the platform were completed during my time including
the &lt;a href=&#34;https://withmalala.org/&#34;&gt;#WithMalala&lt;/a&gt; project and the &lt;a href=&#34;https://sundanceignitewhatsnext.org&#34;&gt;2015 Sundance Ignite
Challenge&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Go</title>
      <link>http://jacob-walker.com/portfolio/getting-started-with-go.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/getting-started-with-go.html</guid>
      <description>&lt;p&gt;This is a talk I presented at the first &lt;a href=&#34;http://lanyrd.com/2015/klf15/&#34;&gt;Kansas Linux Fest&lt;/a&gt; in March 2015.
I gave it again that month at my company&amp;rsquo;s internal roundtable and again for
&lt;a href=&#34;http://jacob-walker.com/portfolio/devict.html&#34;&gt;devICT&lt;/a&gt; that July.&lt;/p&gt;

&lt;p&gt;The talk introduces &lt;a href=&#34;http://golang.org/&#34;&gt;the Go programming language&lt;/a&gt; by highlighting some
important features and provides advice on how to be successful in adopting the
language.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-4by3&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/zVvjpLu6iIo&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/gettingstartedwithgo/raw/master/slides.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/gettingstartedwithgo&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>cqlstore</title>
      <link>http://jacob-walker.com/portfolio/cqlstore.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/cqlstore.html</guid>
      <description>&lt;p&gt;In Go web development the &lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;Gorilla web toolkit&lt;/a&gt; is a very popular
collection of libraries for common web tasks. The &lt;code&gt;gorilla/sessions&lt;/code&gt; package
provides an easy interface for using/storing users&amp;rsquo; session data. There was no
implementation for &lt;a href=&#34;http://cassandra.apache.org/&#34;&gt;Cassandra DB&lt;/a&gt; so I created one.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;gorilla/sessions&lt;/code&gt; package itself relies on implementations of its storage
interface so developers can store the data in whatever place is best for their
environment. For an application we were prototyping at work we elected to store
everything in &lt;a href=&#34;http://cassandra.apache.org/&#34;&gt;Cassandra DB&lt;/a&gt;. I created the session store and it
worked well enough for our prototype. We elected not to use Cassandra for
staffing reasons so my storage implementation never saw production use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/cqlstore&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/jcbwlkr/cqlstore&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>httpmatchers</title>
      <link>http://jacob-walker.com/portfolio/httpmatchers.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/httpmatchers.html</guid>
      <description>&lt;p&gt;BDD in Go is made easier using the &lt;a href=&#34;http://onsi.github.io/ginkgo/&#34;&gt;Ginkgo&lt;/a&gt; and &lt;a href=&#34;http://onsi.github.io/gomega/&#34;&gt;Gomega&lt;/a&gt;
packages. Gomega specifically provides a collection of matchers for asserting
that results match expectations. When using these tools to test an API I was
developing I noticed some common patterns appearing around the assertion of
HTTP status codes. I created the &lt;code&gt;github.com/jcbwlkr/httpmatchers&lt;/code&gt; package to
simplify some of those patterns.&lt;/p&gt;

&lt;p&gt;Since writing this I hame moved to just using the standard &lt;code&gt;testing&lt;/code&gt; library. I
still appreciate the value from &lt;code&gt;ginkgo&lt;/code&gt; and &lt;code&gt;gomega&lt;/code&gt; and would use the library
again if I was working on a project using that testing framework.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/httpmatchers&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/jcbwlkr/httpmatchers&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TimeIPS</title>
      <link>http://jacob-walker.com/portfolio/timeips.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/timeips.html</guid>
      <description>&lt;p&gt;From October 2010 to February 2015 the majority of my development focus was
with my employer TimeIPS. We made a time and attendance system which is used by
thousands of companies around the world.&lt;/p&gt;

&lt;p&gt;TimeIPS is used to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Track employee hours worked from a variety of hardware and software interfaces&lt;/li&gt;
&lt;li&gt;Record benefit usages and accruals&lt;/li&gt;
&lt;li&gt;Monitor employee adherence to schedules&lt;/li&gt;
&lt;li&gt;Ensure employee coverage for particular tasks or locations&lt;/li&gt;
&lt;li&gt;Calculate FLSA overtime&lt;/li&gt;
&lt;li&gt;Record piecework pay such as tips and bonuses&lt;/li&gt;
&lt;li&gt;Serve company documents to employees and managers&lt;/li&gt;
&lt;li&gt;Calculate automatic holiday rules&lt;/li&gt;
&lt;li&gt;And many other things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At TimeIPS I lead a team of 4 in the development of our products. Some of my
major accomplishments in this role include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introducing Test Driven Development with &lt;a href=&#34;https://phpunit.de/&#34;&gt;PHPUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementing Continuous Integration with &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins-CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Starting code reviews via &lt;a href=&#34;http://phabricator.org/&#34;&gt;Phabricator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Leading the development of a REST API&lt;/li&gt;
&lt;li&gt;Working to update legacy code to use the &lt;a href=&#34;http://www.doctrine-project.org/&#34;&gt;Doctrine 2&lt;/a&gt; ORM&lt;/li&gt;
&lt;li&gt;Implementing a Zero Defect policy&lt;/li&gt;
&lt;li&gt;Developing a system for managing our farm of QEMU virtual machines&lt;/li&gt;
&lt;li&gt;Revamped our build process making heavy use of &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;,
&lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;, and &lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>pysag</title>
      <link>http://jacob-walker.com/portfolio/pysag.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/pysag.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;pysag&#34;&gt;pysag&lt;/a&gt; is a tool I developed for generating static web apps. It differs
from other (great) static site generators like Jekyll by being focused on data
first and pages second.&lt;/p&gt;

&lt;p&gt;The user defines their data such as blog posts, employees, or products in the
filesystem as yaml files. This data is first converted to json files to
generate a read-only &amp;ldquo;API&amp;rdquo;. The ideal usecase here is a JavaScript application
to render the data. Properties of the yaml files can be paths to
&lt;a href=&#34;markdown&#34;&gt;Markdown&lt;/a&gt; files for easy authoring. If desired the data can be fed
to &lt;a href=&#34;jinja2&#34;&gt;Jinja2&lt;/a&gt; templates to create true static pages.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&#34;pysag&#34;&gt;README&lt;/a&gt; on GitHub for a better description.&lt;/p&gt;

&lt;p&gt;I ended up abandoning this project in favor of &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;. It was a neat idea
and a fun experience but ultimately Hugo won out for me :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Regular Expressions 101</title>
      <link>http://jacob-walker.com/portfolio/regex-101.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/regex-101.html</guid>
      <description>&lt;p&gt;In March 2013 I gave a presentation to my local development group
&lt;a href=&#34;http://jacob-walker.com/portfolio/devict.html&#34;&gt;devICT&lt;/a&gt; over the different forms and uses of Regular Expressions. The
talk was just under two hours long and was well received by the audience
(approximately 25 developers). The presentation was broadcast through Google
Hangouts On Air and the video is available on &lt;a href=&#34;http://youtu.be/4LnyHF8dnIk&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation covers the most commonly used features of regex and some of
the nicer advanced features like backreferences and assertions. Most of the
research for the presentation comes from
&lt;a href=&#34;http://www.regular-expressions.info/&#34;&gt;regular-expressions.info&lt;/a&gt;. Interested readers should check out
that site&amp;rsquo;s references on some of the crazier things you can do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jcbwlkr/regex-101&#34;&gt;Slides and source&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-4by3&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/4LnyHF8dnIk&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Implementing OOP</title>
      <link>http://jacob-walker.com/portfolio/implementing-oop.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/implementing-oop.html</guid>
      <description>&lt;p&gt;Back in June 2014 I gave a presentation to &lt;a href=&#34;http://jacob-walker.com/portfolio/devict.html&#34;&gt;devICT&lt;/a&gt; about how to use
Object Oriented Programming in PHP and Ruby. I chose this topic when I was
explaining inheritance to a friend and realized others would be interested. I
chose PHP and Ruby for examples because I was already familiar with OOP in PHP
and I wanted to learn more about Ruby&amp;rsquo;s object model.&lt;/p&gt;

&lt;p&gt;The talk is an hour and a half long. It covers the basic ideas and syntax of
OOP such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Class vs Object&lt;/li&gt;
&lt;li&gt;Properties and Methods&lt;/li&gt;
&lt;li&gt;Access modifiers (public, private, protected)&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Static or Class methods and properties&lt;/li&gt;
&lt;li&gt;Method overriding&lt;/li&gt;
&lt;li&gt;Abstract classes&lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jacob-walker.com/implementing-oop/presentation/&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/implementing-oop&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;embed-responsive embed-responsive-4by3&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https//www.youtube.com/embed/7QoEfPYULXM&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Templating In PHP With Twig</title>
      <link>http://jacob-walker.com/portfolio/twig.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/twig.html</guid>
      <description>&lt;p&gt;In November 2013 I gave a short presentation to &lt;a href=&#34;http://jacob-walker.com/portfolio/devict.html&#34;&gt;devICT&lt;/a&gt; about the PHP
templating engine &lt;a href=&#34;http://twig.sensiolabs.org&#34;&gt;Twig&lt;/a&gt;. The talk covered the basics of
installing/configuring Twig, rendering templates, and writing templates.&lt;/p&gt;

&lt;p&gt;The talk is 23 minutes long.&lt;/p&gt;

&lt;p&gt;More info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jacob-walker.com/twig-talk/presentation/&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/twig-talk&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;embed-responsive embed-responsive-4by3&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;//www.youtube.com/embed/deqGYV8P0Nc&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Startup Wichita</title>
      <link>http://jacob-walker.com/portfolio/startup-wichita.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jacob-walker.com/portfolio/startup-wichita.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://startupwichita.com&#34;&gt;Startup Wichita&lt;/a&gt; was a grass roots effort to connect entrepreneurs in
Wichita with local people and resources. In March 2014 &lt;a href=&#34;http://jacob-walker.com/portfolio/devict.html&#34;&gt;devICT&lt;/a&gt; held a
hackathon to kick-start development on the community site.&lt;/p&gt;

&lt;p&gt;We decided to build the site on the &lt;a href=&#34;mean&#34;&gt;MEAN stack&lt;/a&gt; (MongoDB, Express,
Angular, and Node). We provisioned a development environment with
&lt;a href=&#34;http://puppetlabs.com&#34;&gt;Puppet&lt;/a&gt; and &lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt;. We split into teams for content,
design, front end development and back end development. I managed the various
teams, helped developers set up their environments, and merged pull requests.&lt;/p&gt;

&lt;p&gt;The hackathon laid the ground work for the application but at the end of the
day there was still a lot of work to be done. Over the next several months
devICT members met periodically to push the site forward. Progress was slow as
each developer was only working in their spare time.&lt;/p&gt;

&lt;p&gt;In September (6 months since the hackathon) the Entrepreneurship Task Force of
the Wichita Metro Chamber of Commerce hired my company &lt;a href=&#34;http://tortugas-llc.com&#34;&gt;Tortugas Consulting,
LLC&lt;/a&gt; to dedicate development resources towards the completion of the
site. The first phase milestone was reached on October 21st 2014.&lt;/p&gt;

&lt;p&gt;Additional work included a rewrite to Ruby on Rails. Eventually the project was
handed over to another organization to finish.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://startupwichita.com&#34;&gt;Startup Wichita site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbwlkr/regex-101&#34;&gt;Startup Wichita on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>